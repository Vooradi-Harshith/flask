import java.util.*;
import java.lang.*;
import java.io.*;

class Codechef
{
    public static void pascals(int n){
        
    }
    public static int lengthofnumber(int n){
        return String.valueOf(n).length();
    }
    public static boolean anagram(String s1,String s2){
        char[] arr1=s1.toCharArray();
        char[] arr2=s2.toCharArray();
        Arrays.sort(arr1);
        Arrays.sort(arr2);
        return Arrays.equals(arr1,arr2);
    }
    public static int gcd(int n,int m){
        int l,s=0;
        if(m>n){
             l=m;
             s=n;
        }
        else{
             l=n;
             s=m;
        }
        while(s!=0){
            int temp=s;
            s=l%s;
            l=temp;
        }
        return l;
    }
    public static boolean armstrong(int n){
        int num=n;
        int sum=0;
        while(n>0){
            int k=n%10;
            sum+=k*k*k;
            n/=10;
        }
        return num==sum;
    }
    public static HashSet<Integer> remduplicate(int[] arr){
        HashSet<Integer> set=new HashSet();
        for(int i:arr){
            set.add(i);
        }
        return set;
    }
    public static boolean isprime(int n){
        for(int i=2;i<=Math.sqrt(n);i++){
            if(n%i ==0){
                return false;
            }
        }
        return true;
    }
    public static void vowelconsonent(String str){
        int vowels=0;
        int consonents=0;
        HashSet<Character> set=new HashSet<>();
        set.add('a');
        set.add('e');
        set.add('i');
        set.add('o');
        set.add('u');
        String s=str.toLowerCase();
        for(int i=0;i<str.length();i++){
            if(set.contains(s.charAt(i))){
                vowels++;
            }
            else if(s.charAt(i)-'a'<26 && s.charAt(i)-'a'>0){
                consonents++;
            }
        }
        System.out.println(vowels+" "+consonents);
    }
    public static String remvowel(String str){
        StringBuilder sb=new StringBuilder();
        HashSet<Character> set=new HashSet<>();
        set.add('a');
        set.add('e');
        set.add('i');
        set.add('o');
        set.add('u');
        String s=str.toLowerCase();
        for(int i=0;i<str.length();i++){
            if(!set.contains(s.charAt(i))&&s.charAt(i)-'a'<26 && s.charAt(i)-'a'>0){
                sb.append(s.charAt(i));
            }
        }
        return sb.toString();
    }
    public static int factorial(int n){
        if(n==0 || n==1) return 1;
        return n*factorial(n-1);
    }
    public static int fibonacci(int n){
        if(n==1) return 0;
        if(n==2) return 1;
        return fibonacci(n-1)+fibonacci(n-2);
    }
    public static boolean ispalindrome(int n){
        int num=n;
        int rev=0;
        while(n>0){
            rev=rev*10+ n%10;
            n/=10;
        }
        return rev==num;
    }
    public static boolean ispalindrome(String str){
        return str.equals(reversestring(str));
    }
    public static String reversestring(String str){
        Stack<Character> s=new Stack<>();
        for(char c:str.toCharArray()){
            s.push(c);
        }
        StringBuilder sb=new StringBuilder();
        for(int i=0;i<str.length();i++){
            sb.append(s.pop());
        }
        return sb.toString();
    }
    public static int seclarge(int[] arr){
        int first=Integer.MIN_VALUE;
        int second=Integer.MIN_VALUE;
        for(int i=0;i<arr.length;i++){
            if(arr[i]>first){
                second=first;
                first=arr[i];
            }
            else if(arr[i]<first &&arr[i]>second){
                second=arr[i];
            }
        }
        return second;
    }
	public static void main (String[] args) throws java.lang.Exception
	{
		// your code goes here
		int arr[]={1,2,3,4,2,4,1};
		System.out.println(lengthofnumber(12345));

	}
}
